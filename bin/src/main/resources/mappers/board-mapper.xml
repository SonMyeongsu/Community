<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<mapper namespace="boardMapper">

<!-- 게시판 -->
<resultMap type="kh.study.soccer.board.vo.BoardVO" id="board">
	<id column="BOARD_NUM" property="boardNum"/>
	<result column="MEMBER_ID" property="memberId"/>
	<result column="BOARD_TITLE" property="boardTitle"/>
	<result column="BOARD_CONTENT" property="boardContent"/>
	<result column="IS_SECRET" property="isSecret"/>
	<result column="BOARD_READ_CNT" property="boardReadCnt"/>
	<result column="BOARD_REG_DATE" property="boardRegDate"/>

	<!-- <association property="boardCategoryVO" resultMap="adminMapper.boardCate"/> -->	
	<result column="BOARD_CATE_CODE" property="boardCateCode"/>
	

	<result column="LIKE_COUNT" property="likeCount"/><!-- 가짜컬럼 -->
	<result column="HATE_COUNT" property="hateCount"/><!-- 가짜컬럼 -->
</resultMap>

<!-- 게시글 좋아요 -->
<resultMap type="kh.study.soccer.board.vo.BoardLikeVO" id="boardLike">
	<id column="BOARD_LIKE_NUM" 					property="boardLikeNum"/>
	<result column="BOARD_NUM" 				property="boardNum"/>
	<result column="MEMBER_ID" 				property="memberId"/>
</resultMap>

<!-- 게시글 싫어요 -->
<resultMap type="kh.study.soccer.board.vo.BoardHateVO" id="boardHate">
	<id column="BOARD_HATE_NUM" 			property="boardHateNum"/>
	<result column="BOARD_NUM" 				property="boardNum"/>
	<result column="MEMBER_ID" 				property="memberId"/>
</resultMap>






<!--게시글 검색및 목록 조회-->
<select id="selectBoardList" resultMap="board">
	SELECT RN
			, BOARD_NUM
			, BOARD_TITLE
			, MEMBER_ID
			, BOARD_REG_DATE
			, BOARD_READ_CNT
			, IS_SECRET
			, LIKE_COUNT
			, HATE_COUNT
	FROM
	(
		SELECT ROWNUM AS RN
				, BOARD_NUM
				, BOARD_TITLE
				, MEMBER_ID
				, BOARD_REG_DATE
				, BOARD_READ_CNT
				, IS_SECRET
				, LIKE_COUNT
				, HATE_COUNT
		FROM
		(
			SELECT  BOARD_NUM
				, BOARD_TITLE
				, MEMBER_ID
				, TO_CHAR(BOARD_REG_DATE, 'YYYY-MM-DD') AS BOARD_REG_DATE
				, BOARD_READ_CNT
				, IS_SECRET
				, (SELECT COUNT(BOARD_LIKE_NUM)
				   FROM SOCCER_BOARD_LIKE WHERE BOARD_NUM = SOCCER_BOARD.BOARD_NUM) AS LIKE_COUNT
				, (SELECT COUNT(BOARD_HATE_NUM)
				   FROM SOCCER_BOARD_HATE WHERE BOARD_NUM = SOCCER_BOARD.BOARD_NUM) AS HATE_COUNT
			FROM SOCCER_BOARD 
			WHERE
			<trim prefixOverrides="AND"><!--WHERE 1 = 1와같은 정식적이지 않은 방식대신 trim태그 속성을 이용하여 쿼리실행  -->
				<if test= "memberId != null and !memberId.equals('')">
					UPPER(MEMBER_ID) LIKE UPPER('%'||#{memberId}||'%') 
				</if>
				<if test= "boardTitle != null and !boardTitle.equals('')">
					<if test= "boardContent == null or boardContent.equals('')">
						AND UPPER(BOARD_TITLE) LIKE UPPER('%'||#{boardTitle}||'%')
					</if>
				</if>
				<if test= "boardContent != null and !boardContent.equals('')">
					<if test= "boardTitle == null or boardTitle.equals('')">
						AND UPPER(BOARD_CONTENT) LIKE UPPER('%'||#{boardContent}||'%')
					</if>
				</if>
				<if test= "boardTitle != null and !boardTitle.equals('')">
					<if test= "boardContent != null and !boardContent.equals('')">
						AND (
							UPPER(BOARD_TITLE) LIKE UPPER('%'||#{boardTitle}||'%') 
							OR UPPER(BOARD_CONTENT) LIKE UPPER('%'||#{boardContent}||'%')
						)
					</if>
				</if>
				<!-- <if test= "memberId != null and !memberId.equals('')">
				AND UPPER(MEMBER_ID) LIKE UPPER('%'||#{memberId}||'%') 
				</if> -->
				<!-- <if test= "boardTitle != null and !boardTitle.equals('')">
				AND UPPER(BOARD_TITLE) LIKE UPPER('%'||#{boardTitle}||'%')
				</if>
				<if test= "boardContent != null and !boardContent.equals('')">
				AND UPPER(BOARD_CONTENT) LIKE UPPER('%'||#{boardContent}||'%')
				</if> -->
				<!-- <if test= "boardCateCode != null and !boardCateCode.equals('')">
				AND BO.BOARD_CATE_CODE = #{boardCateCode}
				</if> --> 
				<if test="fromDate != null and !fromDate.equals('')">
				AND TO_CHAR(BOARD_REG_DATE, 'YYYY-MM-DD') &gt;= #{fromDate}  
				</if>		
				<if test="toDate != null and !toDate.equals('')">
				AND TO_CHAR(BOARD_REG_DATE, 'YYYY-MM-DD') &lt;= #{toDate}
				</if>
			</trim>
		ORDER BY ${orderBy} DESC
		)
	)
    <if test ="startNum !=null and endNum != null">
	WHERE RN &gt;= #{startNum} AND RN &lt;= #{endNum}
	</if>
</select>

<!-- 게시글 등록 -->
<insert id="regBoard">
	INSERT INTO SOCCER_BOARD (
				BOARD_NUM
				, BOARD_TITLE
				, BOARD_CONTENT
				, MEMBER_ID
				, IS_SECRET
				
		) VALUES( 
				(SELECT NVL(MAX(BOARD_NUM),0)+1 FROM SOCCER_BOARD)
				, #{boardTitle}
				, #{boardContent}
				, #{memberId}
				, #{isSecret}
	)
</insert>


<!-- 상세페이지 -->
<select id="selectBoardDetail" resultMap="board">
	SELECT BOARD_NUM 
		 , BOARD_TITLE
		 , MEMBER_ID	
		 , BOARD_CONTENT
		 , BOARD_REG_DATE
		 , BOARD_READ_CNT
	FROM SOCCER_BOARD
	WHERE BOARD_NUM = #{boardNum}
</select>

<!-- 조회수 증가 -->
<update id="updateReadCnt">
	UPDATE SOCCER_BOARD
	SET BOARD_READ_CNT = BOARD_READ_CNT + 1
	WHERE BOARD_NUM = #{boardNum}
</update>

<!-- 게시글 좋아요 상태 확인 -->
<select id="boardLikeCheck" resultMap="boardLike">
	SELECT BOARD_LIKE_NUM
 		  , BOARD_NUM
	FROM SOCCER_BOARD_LIKE
 	WHERE BOARD_NUM = #{boardNum}
 	AND MEMBER_ID = #{memberId}	
</select>
<!--게시글 좋아요기능(싫어요 삭제)  -->
<delete id="beforeInsertLike">
	DELETE FROM SOCCER_BOARD_HATE
	WHERE BOARD_NUM = #{boardNum}
	AND MEMBER_ID = #{memberId}
</delete>
<!-- 게시글 좋아요 기능 -->
<insert id="insertLike">
		MERGE INTO SOCCER_BOARD_LIKE
		USING DUAL
		ON (BOARD_NUM = #{boardNum} AND MEMBER_ID = #{memberId})
		WHEN MATCHED THEN
			
			<!-- 실제로 실행 되지 않는 Dummy Code -->
			<!-- update문은 조건절 안해도 됨 ON절을 알아서 긁어옴 -->
			UPDATE 
		    SET BOARD_LIKE_NUM = BOARD_LIKE_NUM
				
			DELETE 
			WHERE BOARD_NUM = #{boardNum} AND MEMBER_ID = #{memberId}
		WHEN NOT MATCHED THEN
			INSERT(
				BOARD_LIKE_NUM
				, BOARD_NUM
				, MEMBER_ID
			) VALUES (
				(SELECT NVL(MAX(BOARD_LIKE_NUM), 0) + 1 FROM SOCCER_BOARD_LIKE)
				, #{boardNum}
				, #{memberId}
			)
</insert>

<!-- 게시글 싫어요 상태 확인 -->
<select id="boardHateCheck" resultMap="boardHate">
	SELECT BOARD_HATE_NUM
 		  , BOARD_NUM
	FROM SOCCER_BOARD_HATE
 	WHERE BOARD_NUM = #{boardNum}
 	AND MEMBER_ID = #{memberId}	
</select>
<!--게시글 싫어요기능(좋아요 삭제)  -->
<delete id="beforeInsertHate">
	DELETE FROM SOCCER_BOARD_LIKE
	WHERE BOARD_NUM = #{boardNum}
	AND MEMBER_ID = #{memberId}
</delete>

<!-- 게시글 싫어요 기능 -->
<insert id="insertHate">
		MERGE INTO SOCCER_BOARD_HATE
		USING DUAL
		ON (BOARD_NUM = #{boardNum} AND MEMBER_ID = #{memberId})
		WHEN MATCHED THEN
			UPDATE 
		    SET BOARD_HATE_NUM = BOARD_HATE_NUM
		    WHERE BOARD_NUM = #{boardNum} AND MEMBER_ID = #{memberId}
				
			DELETE 
			WHERE BOARD_NUM = #{boardNum} AND MEMBER_ID = #{memberId}
		WHEN NOT MATCHED THEN
			INSERT(
				BOARD_HATE_NUM
				, BOARD_NUM
				, MEMBER_ID
			) VALUES (
				(SELECT NVL(MAX(BOARD_HATE_NUM), 0) + 1 FROM SOCCER_BOARD_HATE)
				, #{boardNum}
				, #{memberId}
			)
</insert>

<!-- 수정하기 -->
<update id="updateBoard">
	UPDATE SOCCER_BOARD 
	SET BOARD_CONTENT = #{boardContent}
	WHERE BOARD_NUM = #{boardNum}
</update>

<!-- 삭제하기 -->
<delete id="deleteBoard">
	DELETE FROM SOCCER_BOARD WHERE BOARD_NUM = #{boardNum}
</delete>

<!-- 게시글 총 개수 조회 -->
<select id="selectBoardCnt" resultType="int">
	SELECT COUNT(BOARD_NUM)
	FROM SOCCER_BOARD
</select>
</mapper>
